from fastapi import APIRouter, Depends, HTTPException, status

from app.api.deps import get_current_user, get_db_session
from app.core.config import settings
from app.core.security import create_access_token, verify_token
from app.models.user import User, UserRole
from app.schemas.auth import LoginRequest, RefreshRequest
from app.schemas.user import Token, UserCreate, UserRead
from app.services.user_service import UserService

router = APIRouter(prefix="/auth", tags=["auth"])


@router.post("/register", response_model=UserRead, status_code=status.HTTP_201_CREATED)
def register(payload: UserCreate, db=Depends(get_db_session)) -> UserRead:
    service = UserService(db)
    existing = service.get_by_email(payload.email)
    if existing:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Email is already registered")
    user = service.create_user(email=payload.email, password=payload.password, full_name=payload.full_name)
    return UserRead.model_validate(user)


@router.post("/login", response_model=Token)
def login(payload: LoginRequest, db=Depends(get_db_session)) -> Token:
    service = UserService(db)
    user = service.authenticate(payload.email, payload.password)
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")
    return _issue_tokens(user)


@router.post("/refresh", response_model=Token)
def refresh(payload: RefreshRequest) -> Token:
    try:
        token_payload = verify_token(payload.refresh_token)
    except ValueError as exc:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid refresh token") from exc
    if token_payload.get("type") != "refresh":
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Provided token is not a refresh token")
    user_role = token_payload.get("role", UserRole.USER.value)
    user_id = token_payload.get("sub")
    if not user_id:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid refresh token payload")
    access_token = create_access_token(user_id, additional_claims={"role": user_role, "type": "access"})
    return Token(access_token=access_token, refresh_token=payload.refresh_token)


@router.get("/me", response_model=UserRead)
def read_me(current_user: User = Depends(get_current_user)) -> UserRead:
    return UserRead.model_validate(current_user)


def _issue_tokens(user: User) -> Token:
    access = create_access_token(str(user.id), additional_claims={"role": user.role.value, "type": "access"})
    refresh = create_access_token(
        str(user.id),
        expires_minutes=settings.REFRESH_TOKEN_EXPIRE_MINUTES,
        additional_claims={"role": user.role.value, "type": "refresh"},
    )
    return Token(access_token=access, refresh_token=refresh)
