from datetime import datetime, timezone
from typing import Any, Dict, List

from fastapi import APIRouter, Depends, HTTPException, status

from app.api.deps import get_db_session
from app.models.license import LicenseStatus
from app.models.session_link import SessionLink
from app.schemas.session_link import SessionLinkRead
from app.services.claude_service import invoke_claude
from app.services.license_service import LicenseService

router = APIRouter(prefix="/claude", tags=["claude"])


@router.get("/sessions/{slug}", response_model=SessionLinkRead)
def get_session(slug: str, db=Depends(get_db_session)) -> SessionLinkRead:
    link = _validate_link(slug, db)
    return SessionLinkRead.model_validate(link)


@router.post("/sessions/{slug}/messages")
async def forward_messages(slug: str, payload: Dict[str, Any], db=Depends(get_db_session)) -> Dict[str, Any]:
    link = _validate_link(slug, db)
    messages: List[Dict[str, Any]] = payload.get("messages")
    if not isinstance(messages, list) or not messages:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid messages payload")
    response = await invoke_claude(messages=messages, model=payload.get("model", "sonnet-4-20250514"), temperature=payload.get("temperature", 0.2))
    #response = await invoke_claude(messages=messages, model=payload.get("model", "claude-3-opus-20240229"), temperature=payload.get("temperature", 0.2))
    license_service = LicenseService(db)
    license_service.touch_session_link(link, runtime_increment=payload.get("runtime_increment", 60))
    return response


def _validate_link(slug: str, db):
    link: SessionLink | None = db.query(SessionLink).filter(SessionLink.slug == slug).one_or_none()
    if not link or not link.is_active:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Session link not found")
    license_obj = link.license
    now = datetime.now(timezone.utc)
    starts_at = license_obj.starts_at
    expires_at = license_obj.expires_at
    if starts_at.tzinfo is None:
        starts_at = starts_at.replace(tzinfo=timezone.utc)
    if expires_at.tzinfo is None:
        expires_at = expires_at.replace(tzinfo=timezone.utc)
    if license_obj.status != LicenseStatus.ACTIVE or expires_at < now:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="License expired")
    return link
