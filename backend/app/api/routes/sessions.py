from datetime import datetime, timezone
from typing import Optional

from fastapi import APIRouter, Depends, HTTPException, status

from app.api.deps import get_current_user, get_db_session
from app.models.license import LicenseStatus
from app.models.session_link import SessionLink
from app.models.user import User
from app.schemas.session_link import SessionLinkRead
from app.services.license_service import LicenseService

router = APIRouter(prefix="/sessions", tags=["sessions"])


@router.post("/current", response_model=SessionLinkRead)
def ensure_session_link(current_user: User = Depends(get_current_user), db=Depends(get_db_session)) -> SessionLinkRead:
    license_service = LicenseService(db)
    active_license = _get_active_license(license_service, current_user.id)
    if not active_license:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="No active license")
    link = license_service.ensure_session_link(active_license)
    return SessionLinkRead.model_validate(link)


@router.get("/by-slug/{slug}", response_model=SessionLinkRead)
def get_session_by_slug(slug: str, db=Depends(get_db_session)) -> SessionLinkRead:
    link = db.query(SessionLink).filter(SessionLink.slug == slug).one_or_none()
    if not link or not link.is_active:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Session link not found")
    license_obj = link.license
    now = datetime.now(timezone.utc)
    expires_at = license_obj.expires_at
    starts_at = license_obj.starts_at
    if expires_at.tzinfo is None:
        expires_at = expires_at.replace(tzinfo=timezone.utc)
    if starts_at.tzinfo is None:
        starts_at = starts_at.replace(tzinfo=timezone.utc)
    if expires_at < now or license_obj.status != LicenseStatus.ACTIVE:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="License expired")
    return SessionLinkRead.model_validate(link)


def _get_active_license(service: LicenseService, user_id) -> Optional:
    licenses = service.list_for_user(user_id)
    now = datetime.now(timezone.utc)
    for lic in licenses:
        starts_at = lic.starts_at
        expires_at = lic.expires_at
        if starts_at.tzinfo is None:
            starts_at = starts_at.replace(tzinfo=timezone.utc)
        if expires_at.tzinfo is None:
            expires_at = expires_at.replace(tzinfo=timezone.utc)
        if lic.status == LicenseStatus.ACTIVE and starts_at <= now <= expires_at:
            return lic
    return None
