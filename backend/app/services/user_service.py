from typing import Optional

from sqlalchemy.orm import Session

from app.core.security import get_password_hash, verify_password
from app.models.user import User, UserRole


class UserService:
    def __init__(self, db: Session):
        self.db = db

    def get_by_email(self, email: str) -> Optional[User]:
        return self.db.query(User).filter(User.email == email).one_or_none()

    def get(self, user_id: str) -> Optional[User]:
        return self.db.query(User).filter(User.id == user_id).one_or_none()

    def authenticate(self, email: str, password: str) -> Optional[User]:
        user = self.get_by_email(email)
        if not user:
            return None
        if not verify_password(password, user.hashed_password):
            return None
        return user

    def create_user(self, *, email: str, password: str, full_name: str | None = None, role: UserRole = UserRole.USER) -> User:
        user = User(email=email.lower(), full_name=full_name, hashed_password=get_password_hash(password), role=role)
        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)
        return user

    def set_password(self, user: User, password: str) -> User:
        user.hashed_password = get_password_hash(password)
        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)
        return user

    def list_users(self) -> list[User]:
        return self.db.query(User).order_by(User.created_at.desc()).all()
