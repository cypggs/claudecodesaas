from datetime import datetime, timedelta, timezone
from typing import Optional

from sqlalchemy import select
from sqlalchemy.orm import Session

from app.models.license import License, LicensePlan, LicenseStatus
from app.models.session_link import SessionLink
from app.utils.slug import generate_slug


class LicenseService:
    def __init__(self, db: Session):
        self.db = db

    def _now(self) -> datetime:
        return datetime.now(timezone.utc)

    def create_license(
        self,
        *,
        user_id: str,
        issued_by_id: Optional[str],
        plan: LicensePlan,
        starts_at: Optional[datetime] = None,
        duration_override: Optional[timedelta] = None,
    ) -> License:
        starts_at = starts_at or self._now()
        if starts_at.tzinfo is None:
            starts_at = starts_at.replace(tzinfo=timezone.utc)
        duration_td = duration_override or LicensePlan.to_timedelta(plan)
        expires_at = starts_at + duration_td
        license_obj = License(
            user_id=user_id,
            issued_by_id=issued_by_id,
            plan=plan,
            duration_seconds=int(duration_td.total_seconds()),
            starts_at=starts_at,
            expires_at=expires_at,
            status=LicenseStatus.ACTIVE,
        )
        self.db.add(license_obj)
        self.db.commit()
        self.db.refresh(license_obj)
        return license_obj

    def list_for_user(self, user_id: str) -> list[License]:
        stmt = select(License).where(License.user_id == user_id).order_by(License.created_at.desc())
        return list(self.db.execute(stmt).scalars())

    def get(self, license_id: str) -> Optional[License]:
        return self.db.get(License, license_id)

    def expire_license(self, license_obj: License) -> License:
        license_obj.status = LicenseStatus.EXPIRED
        self.db.add(license_obj)
        self.db.commit()
        self.db.refresh(license_obj)
        return license_obj

    def ensure_session_link(self, license_obj: License) -> SessionLink:
        existing = (
            self.db.query(SessionLink)
            .filter(SessionLink.license_id == license_obj.id, SessionLink.is_active.is_(True))
            .one_or_none()
        )
        if existing:
            return existing
        slug = generate_slug()
        link = SessionLink(license_id=license_obj.id, slug=slug)
        self.db.add(link)
        self.db.commit()
        self.db.refresh(link)
        return link

    def deactivate_session_link(self, link: SessionLink) -> SessionLink:
        link.is_active = False
        self.db.add(link)
        self.db.commit()
        self.db.refresh(link)
        return link

    def touch_session_link(self, link: SessionLink, *, runtime_increment: int) -> SessionLink:
        link.last_seen = self._now()
        link.total_runtime_seconds += runtime_increment
        self.db.add(link)
        self.db.commit()
        self.db.refresh(link)
        return link
