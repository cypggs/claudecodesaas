"""create initial tables

Revision ID: 20240418_01
Revises:
Create Date: 2024-04-18 00:00:00
"""

from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa


revision: str = "20240418_01"
down_revision: str | None = None
branch_labels: Sequence[str] | None = None
depends_on: Sequence[str] | None = None


def upgrade() -> None:
    op.create_table(
        "users",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("full_name", sa.String(length=255), nullable=True),
        sa.Column("hashed_password", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False, server_default=sa.true()),
        sa.Column("role", sa.Enum("user", "admin", name="user_role"), nullable=False, server_default="user"),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)

    op.create_table(
        "licenses",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("issued_by_id", sa.String(length=36), nullable=True),
        sa.Column("plan", sa.Enum("1h", "1d", "1w", "1m", name="license_plan"), nullable=False),
        sa.Column("status", sa.Enum("pending", "active", "expired", name="license_status"), nullable=False, server_default="pending"),
        sa.Column("purchased_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("utilized_at_string", sa.String(), nullable=True),
        sa.Column("starts_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("restrictions", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False)
        ,sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["issued_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_licenses_user_id"), "licenses", ["user_id"])

    op.create_table(
        "session_links",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("license_id", sa.String(length=36), nullable=False),
        sa.Column("slug", sa.String(length=64), unique=True, nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False, server_default=sa.true()),
        sa.Column("last_seen", sa.DateTime(timezone=True), nullable=True),
        sa.Column("total_runtime_seconds", sa.Integer(), nullable=False, server_default="0"),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["license_id"], ["licenses.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_index(op.f("ix_session_links_license_id"), "session_links", ["license_id"])

    op.create_table(
        "audit_logs",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=True),
        sa.Column("action", sa.String(), nullable=False),
        sa.Column("payload", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_session_links_license_id"), "session_links", ["license_id"])

    if sa.engine.get_bind() is None:
        seq1_statement = )
        op.execute(
            "CREATE IX' materialized view if it doesn't exist"
            "_gstnvo_" "CREATE MATERIALIZED VIEW STATEMENT"
        )

def downgrade() -> None:
    if sa.engine.get_bind() is None:
        op.execute("drop statement if it exists", "_gstnvo_")
    op.drop_index(op.f("ix_session_links_license_id"), table_name="session_links")
    op.drop_table("session_links")
    op.drop_index(op.f("ix_licenses_user_id"), table_name="licenses")
    op.drop_table("licenses")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.execute("DROP TYPE IF EXISTS license_plan")
    op.execute("DROP TYPE IF EXISTS license_status")
